<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KrismileBlog</title>
  
  
  <link href="https://krismile-ni.github.com/atom.xml" rel="self"/>
  
  <link href="https://krismile-ni.github.com/"/>
  <updated>2022-04-08T13:05:24.652Z</updated>
  <id>https://krismile-ni.github.com/</id>
  
  <author>
    <name>krismile</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JWT基础知识</title>
    <link href="https://krismile-ni.github.com/2022/04/08/JWT%E5%9F%BA%E7%A1%80/"/>
    <id>https://krismile-ni.github.com/2022/04/08/JWT%E5%9F%BA%E7%A1%80/</id>
    <published>2022-04-08T12:28:34.000Z</published>
    <updated>2022-04-08T13:05:24.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JWT基础知识"><a href="#JWT基础知识" class="headerlink" title="JWT基础知识"></a>JWT基础知识</h2><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>系统梳理总结cookie、Session和Token</p><ul><li>cookie：存在客户端，保存信息</li><li>Session：存在服务端，解决多用户问题，每个客户端对应一个session</li><li>Token：无状态且支持跨域，防御CSRF，解决session依赖于单个web服务器</li></ul><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>cookie：网站向访问电脑写入的小文本，记录用户ID、密码、停留时间等，大多数是4KB。cookie分成两类：1.内存Cookie，保存在内存，浏览器关闭就消失；2.硬盘Cookie，保存在硬盘里，有过期时间。</p><p>HTTP协议是一种无状态协议（服务器不会记录客户端的历史请求），cookie和session的主要目的就是为了弥补HTTP的无状态特性</p><p><img src="https://krismile-ni.github.io/2022/04/08/JWT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.assets/1.png">)</p><p>​    1、当用户第一次访问服务器时，服务器可以响应信息（response）中增加Set-Cookie响应头，将信息以cookie为载体发送到浏览器</p><p>​    2、浏览器接收到服务器放来的Cookie信息，将它保存到浏览器的缓冲区</p><p>​    3、当浏览器再次访问服务器时，将Cookie放在请求消息中，Web服务器就可以通过request中的用户信息来分辨请求的用户</p><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><p>session：客户端请求服务端，服务端会为这次请求开辟一块内存空间，这个对象便是session对象，存储结构为concurrentHashMap。session弥补了HTTP无状态特性，服务器可以利用Session存储客户端在同一个会话期间的一些操作记录，服务器也为session设置了一个有效期（30分钟）</p><p><img src="https://krismile-ni.github.io/2022/04/08/JWT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.assets/2.png"></p><p>session原理：</p><ol><li>服务器第一次接收到请求时，开辟了一块session空间（创建session对象），同时生成一个sessionid，并通过响应头的<code>set-cookie:JSESSIONID=xxxxxx</code>命令，向客户端发送要求设置cookie的响应</li><li>客户端收到响应后，在本机设置应该<code>JSESSION=xxxxxx</code>的cookie信息，该cookie的过期时间为浏览器会话结束</li><li>接下来客户端每次向同一个网站发送请求时，请求头都会带上该cookie信息（包含sessionid）然后服务器通过读取请求头中的cookie信息，获取名称JSESSION的值，得到sessionid</li></ol><h4 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h4><p>Token：令牌，本质上它是一个全局唯一的字符串，用来唯一识别一个客户端，它不是一种web规范，可以理解它是借鉴了cookie和session工作原理，进而延申出来的一种维持用户会话状态的机制</p><p>Token原理：</p><ol><li>客户端使用用户名跟密码请求登录</li><li>服务端收到请求，验证用户名和密码</li><li>验证成功后，服务端会签发一个Token，将其发送给客户端</li><li>客户端收到Token后，将其存储起来，放在cookie或者local storage里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的Token</li><li>服务端收到请求，去验证客户端请求里面带着的Token是否成功，成功就向客户端返回请求的数据</li><li>因为token是被签名的，所以可以认为一个可以解码认证通过的token是由系统发放的，其中带的信息是合法有效的</li></ol><p>Token特点：</p><ul><li>支持跨域访问，前提是传输的用户认证信息通过HTTP头传输</li><li>无状态，在服务端不需要存储session信息，因为Token自身包含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息</li><li>更适合CDN（构建在数据网络上的一种分布式的内容分发网），服务端只要提供API即可</li><li>去耦，不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要API被调用就会调用Token生成</li><li>更适合移动应用</li><li>CSRF，因为不再依赖于cookie，不需要考虑对CSRF（跨站请求伪造）的防范</li></ul><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>  Json Web Token(JWT)，是为了再网络应用环境间传递申明而执行的一种基于JSON的开放标准。该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO)场景，是目前最流行的跨域认证解决方案。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;姓名&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;角色&quot;</span><span class="punctuation">:</span> <span class="string">&quot;管理员&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;到期时间&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018年7月1日0点0分&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。</p><p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p><h3 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h3><p>JWT结构：</p><p><img src="https://krismile-ni.github.io/2022/04/08/JWT%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.assets/3.png" alt="img"></p><p>它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的</p><p>JWT 的三个部分依次如下:</p><ul><li>Header（头部）</li><li>Payload（负载）</li><li>Signature（签名）</li></ul><p>写成一行，就是下面的样子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header.Payload.Signature</span><br></pre></td></tr></table></figure><p>每个部分最后都会使用base64编码</p><h5 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h5><p>Header部分是一个JSON对象，描述JWT的元数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>alg属性表示token签名的算法(algorithm)，最常用的为HMAC和RSA算法</p><p>typ属性表示这个token的类型（type），JWT 令牌统一写为JWT。</p><h5 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h5><p>payload部分也是一个JSON对象，用来实际需要传递的数据。JWT规定了7个官方字段</p><ul><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul><p>除了官方字段，还可以在这个部分定义私有字段。</p><p>注意：JWT 默认是不会对 Payload 加密的，也就意味着任何人都可以读到这部分JSON的内容，所以不要将私密的信息放在这个部分</p><h4 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h4><p>Signature 部分是对前两部分的签名，防止数据篡改</p><p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，<strong>使用 Header 里面指定的签名算法（默认是 HMAC SHA256）</strong>，按照下面的公式产生签名。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">  base64UrlEncode(payload)<span class="punctuation">,</span></span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JWT基础知识&quot;&gt;&lt;a href=&quot;#JWT基础知识&quot; class=&quot;headerlink&quot; title=&quot;JWT基础知识&quot;&gt;&lt;/a&gt;JWT基础知识&lt;/h2&gt;&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="web基础学习" scheme="https://krismile-ni.github.com/categories/web%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="web基础" scheme="https://krismile-ni.github.com/tags/web%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://krismile-ni.github.com/2022/04/05/hello-world/"/>
    <id>https://krismile-ni.github.com/2022/04/05/hello-world/</id>
    <published>2022-04-05T08:41:27.215Z</published>
    <updated>2022-04-05T08:41:27.215Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
